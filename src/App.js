import React, {Component} from 'react';
import {BrowserRouter as Router, Route, Switch} from 'react-router-dom';
import SearchPage from "./Components/SearchPage";
import Exploit from "./Components/Exploit";
import Account from "./Components/Account";
import Login from "./Components/Login";
import CreateUser from "./Components/CreateUser";
import Admin from "./Components/Admin";

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      user: null,
      loaded: false,
      homepage: 'http://localhost:3001/api',
      startPage: 'http://localhost:3000'
    }
  }
  
  componentDidMount() {
    let user = {};
    let homepage = this.state.homepage;
    //fetch(`${homepage}/getUser?uid=${user.uid}`)
    //    .then(async response => {
    //      let results = await response.json();
    //      console.log(results);
    //      user.custom = results;
    //    })
    //    .then(() => {
    //      this.setState({
    //        user: user,
    //        loaded: true,
    //      })
    //    })
    //    .catch(err => {
    //      console.log(err);
    //    });
    this.setState({
      loaded: true,
      user: true
    })
  }

  logout = () => {
    this.setState({
      user: null
    })
      .then(() => {
        window.location.href = '/';
        console.log('User signed out');
      });
  };

  get = async (url, params) => {
    let finalUrl = this.state.homepage + url;
    if (params) {
      for (let param of params) { 
        if (!params.indexOf(param)) {
          finalUrl += '?';
        }
        finalUrl += param.name;
        finalUrl += '=';
        finalUrl += param.value;
        if (params.indexOf(param) !== params.length - 1) {
          finalUrl += '&';
        }
      }
    }
    return await fetch(finalUrl, {
      method: 'GET',
    })
      .then(async results => {
        if (!results.ok) throw await results.json();
        return await results.json();
      })
      .catch(err => {
        throw(err);
      })
  };

  post = async (url, json) => {
    let finalUrl = this.state.homepage + url;
    return await fetch(finalUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(json)
    })
      .then(async results => {
        if (!results.ok) throw await results.json();
        return await results.json();
      })
      .catch(err => {
        throw(err);
      })
  };

  render() {
    return (
      <div>
        {
          this.state.loaded &&
          <div>
            {
              this.state.user ?
              <div>
                <Router>
                  <Switch>
                    <Route exact path='/'
                           component={props => <SearchPage {...props}
                                                           homepage={this.state.homepage}
                                                           startPage={this.state.startPage}
                                                           get={this.get} post={this.post}
                                                           user={this.state.user}/>}
                    />
                    <Route exact path={`/exploit/:exploitID`}
                           component={props => <Exploit {...props}
                                                        homepage={this.state.homepage}
                                                        startPage={this.state.startPage}
                                                        user={this.state.user}/>}
                    />
                    <Route exact path={`/user/:userID`}
                           component={props=> <Account {...props}
                                                       homepage={this.state.homepage}
                                                       startPage={this.state.startPage}
                                                       user={this.state.user}/>}
                    />
                  </Switch>
                </Router>
              </div> :
              <Router>
                <Switch>
                  <Route exact path='/' component={Login}/>
                  <Route exact path='/createUser'
                         component={props => <CreateUser {...props}
                                                         homepage={this.state.homepage}
                                                         startPage={this.state.startPage}/>}/>
                  <Route
                         component={props => <div>This page does not exist. Please go to a different page or log out and try again.
                                             <button onClick={this.logout}>Log out</button>
                         </div>}/>
                </Switch>
              </Router>
            }
          </div>
        }
      </div>
    )
  }
}

export default App;
