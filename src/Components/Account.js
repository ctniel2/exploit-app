import React, {Component} from 'react';
import Menu from './Menu';
import TextField from "@material-ui/core/TextField";
import Button from "@material-ui/core/Button";
import {Paper} from '@material-ui/core';
import MaterialTable, {MTableToolbar} from 'material-table';

class Account extends Component {
  constructor(props) {
    super(props);
    this.state = {
      uid: '',
      email: '',
      firstName: '',
      lastName: '',
      shodanAPI: '',
      password: '',
      isAdmin: false,
      userColumns: [
          {
              title: 'First Name',
              field: 'firstName'
          },
          {
              title: 'Last Name',
              field: 'lastName'
          },
          {
              title: 'Email',
              field: 'email'
          },
          {
              title: 'Shodan API',
              field: 'shodanAPI'
          },
          {
              title: 'Admin',
              field: 'isAdmin'
          }
      ],
      userData: []
    }
  }

  componentDidMount() {
    let id = this.props.match.params.userID;
    console.log(id);
    this.setup(id);
  }

  setup = async (id) => {
    await this.props.get('/getUser', [{name: 'uid', value: id}])
        .then(async result => {
          console.log(result.result);
          let user = result.result;
          let userData = [];
          if (user.isAdmin) {
              await this.props.get('/getUsers')
                  .then(async result => {
                      userData = result.result;
                  })
                  .catch(err => {
                      console.log(err);
                  })
          }
          this.setState({
            uid: user.id,
            email: user.email,
            firstName: user.firstName,
            lastName: user.lastName,
            shodanAPI: user.apiKey,
            isAdmin: user.isAdmin,
            userData
          });
        })
        .catch(err => {
          console.log(err);
        })
  };

  update = (event) => {
    console.log(event.target.value);
    this.setState({
      [event.target.id]: event.target.value
    })
  };

  submit = async (event) => {
    let data = {
      uid: this.state.uid,
      email: this.state.email,
      firstName: this.state.firstName,
      lastName: this.state.lastName,
      shodanAPI: this.state.shodanAPI,
      password: this.state.password
    };

    await this.props.post('/updateUser', data)
        .then(result => {
          console.log(result.result);
        })
        .catch(err => {
          console.log(err);
        })
  };

  updateRow = async (data) => {
      await this.props.post('/updateOtherUser', data)
          .then(result => {
              console.log(result.result);
          })
          .catch(err => {

          })
  }

  removeRow = (id) => {
      this.props.post('/removeUser', {id})
          .then(() => {
              this.setup(this.state.uid);
          })
          .catch(err => {
              console.log(err);
          })
  };

  render() {
    return (
      <div>
        <Menu logout={this.props.logout}/>
        <form noValidate
              style={{margin:'15px'}}
              autoComplete="off">
          <TextField id="email" label="Email" variant="outlined" value={this.state.email} onChange={this.update} />
          <TextField id="firstName" label="First Name" variant="outlined" value={this.state.firstName} onChange={this.update} />
          <TextField id="lastName" label="Last Name" variant="outlined" value={this.state.lastName} onChange={this.update}/>
          <TextField id="shodanAPI" label="Shodan API Key" variant="outlined" value={this.state.shodanAPI} onChange={this.update}/>
          <TextField id="password" label="Password" variant="outlined" value={this.state.password} onChange={this.update}/>
        </form>
        <Button variant="contained" onClick={this.submit}>Update</Button>
      {
          this.state.isAdmin &&
            <Paper>
                <MaterialTable
                      title='Users'
                      columns={this.state.userColumns}
                      data={this.state.userData}
                      options={{
                      search: false,
                          sorting: false,
                          pageSize: 10,
                          pageSizeOptions: [10, 20, 50],
                        }}
                      editable={{
                          onRowUpdate: async (newData, oldData) => {
                              console.log(newData);
                          },
                          onRowDelete: oldData => {
                              if (oldData.id) {
                                  this.removeRow(oldData.id);
                              }
                          }

      }}

                />
          </Paper>
      }
      </div>
    )
  }
}

export default Account;
